{"ast":null,"code":"import * as DomEvent from './DomEvent';\nimport * as Util from '../core/Util';\nimport * as Browser from '../core/Browser';\n/*\n * Extends L.DomEvent to provide touch support for Internet Explorer and Windows-based devices.\n */\n\nvar POINTER_DOWN = Browser.msPointer ? 'MSPointerDown' : 'pointerdown';\nvar POINTER_MOVE = Browser.msPointer ? 'MSPointerMove' : 'pointermove';\nvar POINTER_UP = Browser.msPointer ? 'MSPointerUp' : 'pointerup';\nvar POINTER_CANCEL = Browser.msPointer ? 'MSPointerCancel' : 'pointercancel';\nvar _pointers = {};\nvar _pointerDocListener = false; // Provides a touch events wrapper for (ms)pointer events.\n// ref http://www.w3.org/TR/pointerevents/ https://www.w3.org/Bugs/Public/show_bug.cgi?id=22890\n\nexport function addPointerListener(obj, type, handler, id) {\n  if (type === 'touchstart') {\n    _addPointerStart(obj, handler, id);\n  } else if (type === 'touchmove') {\n    _addPointerMove(obj, handler, id);\n  } else if (type === 'touchend') {\n    _addPointerEnd(obj, handler, id);\n  }\n\n  return this;\n}\nexport function removePointerListener(obj, type, id) {\n  var handler = obj['_leaflet_' + type + id];\n\n  if (type === 'touchstart') {\n    obj.removeEventListener(POINTER_DOWN, handler, false);\n  } else if (type === 'touchmove') {\n    obj.removeEventListener(POINTER_MOVE, handler, false);\n  } else if (type === 'touchend') {\n    obj.removeEventListener(POINTER_UP, handler, false);\n    obj.removeEventListener(POINTER_CANCEL, handler, false);\n  }\n\n  return this;\n}\n\nfunction _addPointerStart(obj, handler, id) {\n  var onDown = Util.bind(function (e) {\n    // IE10 specific: MsTouch needs preventDefault. See #2000\n    if (e.MSPOINTER_TYPE_TOUCH && e.pointerType === e.MSPOINTER_TYPE_TOUCH) {\n      DomEvent.preventDefault(e);\n    }\n\n    _handlePointer(e, handler);\n  });\n  obj['_leaflet_touchstart' + id] = onDown;\n  obj.addEventListener(POINTER_DOWN, onDown, false); // need to keep track of what pointers and how many are active to provide e.touches emulation\n\n  if (!_pointerDocListener) {\n    // we listen document as any drags that end by moving the touch off the screen get fired there\n    document.addEventListener(POINTER_DOWN, _globalPointerDown, true);\n    document.addEventListener(POINTER_MOVE, _globalPointerMove, true);\n    document.addEventListener(POINTER_UP, _globalPointerUp, true);\n    document.addEventListener(POINTER_CANCEL, _globalPointerUp, true);\n    _pointerDocListener = true;\n  }\n}\n\nfunction _globalPointerDown(e) {\n  _pointers[e.pointerId] = e;\n}\n\nfunction _globalPointerMove(e) {\n  if (_pointers[e.pointerId]) {\n    _pointers[e.pointerId] = e;\n  }\n}\n\nfunction _globalPointerUp(e) {\n  delete _pointers[e.pointerId];\n}\n\nfunction _handlePointer(e, handler) {\n  e.touches = [];\n\n  for (var i in _pointers) {\n    e.touches.push(_pointers[i]);\n  }\n\n  e.changedTouches = [e];\n  handler(e);\n}\n\nfunction _addPointerMove(obj, handler, id) {\n  var onMove = function onMove(e) {\n    // don't fire touch moves when mouse isn't down\n    if (e.pointerType === (e.MSPOINTER_TYPE_MOUSE || 'mouse') && e.buttons === 0) {\n      return;\n    }\n\n    _handlePointer(e, handler);\n  };\n\n  obj['_leaflet_touchmove' + id] = onMove;\n  obj.addEventListener(POINTER_MOVE, onMove, false);\n}\n\nfunction _addPointerEnd(obj, handler, id) {\n  var onUp = function onUp(e) {\n    _handlePointer(e, handler);\n  };\n\n  obj['_leaflet_touchend' + id] = onUp;\n  obj.addEventListener(POINTER_UP, onUp, false);\n  obj.addEventListener(POINTER_CANCEL, onUp, false);\n}","map":{"version":3,"sources":["C:/Users/vtito/PycharmProjects/weather_app/weather_app/node_modules/leaflet/src/dom/DomEvent.Pointer.js"],"names":["DomEvent","Util","Browser","POINTER_DOWN","msPointer","POINTER_MOVE","POINTER_UP","POINTER_CANCEL","_pointers","_pointerDocListener","addPointerListener","obj","type","handler","id","_addPointerStart","_addPointerMove","_addPointerEnd","removePointerListener","removeEventListener","onDown","bind","e","MSPOINTER_TYPE_TOUCH","pointerType","preventDefault","_handlePointer","addEventListener","document","_globalPointerDown","_globalPointerMove","_globalPointerUp","pointerId","touches","i","push","changedTouches","onMove","MSPOINTER_TYPE_MOUSE","buttons","onUp"],"mappings":"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","sourcesContent":["import * as DomEvent from './DomEvent';\nimport * as Util from '../core/Util';\nimport * as Browser from '../core/Browser';\n\n/*\n * Extends L.DomEvent to provide touch support for Internet Explorer and Windows-based devices.\n */\n\n\nvar POINTER_DOWN =   Browser.msPointer ? 'MSPointerDown'   : 'pointerdown';\nvar POINTER_MOVE =   Browser.msPointer ? 'MSPointerMove'   : 'pointermove';\nvar POINTER_UP =     Browser.msPointer ? 'MSPointerUp'     : 'pointerup';\nvar POINTER_CANCEL = Browser.msPointer ? 'MSPointerCancel' : 'pointercancel';\n\nvar _pointers = {};\nvar _pointerDocListener = false;\n\n// Provides a touch events wrapper for (ms)pointer events.\n// ref http://www.w3.org/TR/pointerevents/ https://www.w3.org/Bugs/Public/show_bug.cgi?id=22890\n\nexport function addPointerListener(obj, type, handler, id) {\n\tif (type === 'touchstart') {\n\t\t_addPointerStart(obj, handler, id);\n\n\t} else if (type === 'touchmove') {\n\t\t_addPointerMove(obj, handler, id);\n\n\t} else if (type === 'touchend') {\n\t\t_addPointerEnd(obj, handler, id);\n\t}\n\n\treturn this;\n}\n\nexport function removePointerListener(obj, type, id) {\n\tvar handler = obj['_leaflet_' + type + id];\n\n\tif (type === 'touchstart') {\n\t\tobj.removeEventListener(POINTER_DOWN, handler, false);\n\n\t} else if (type === 'touchmove') {\n\t\tobj.removeEventListener(POINTER_MOVE, handler, false);\n\n\t} else if (type === 'touchend') {\n\t\tobj.removeEventListener(POINTER_UP, handler, false);\n\t\tobj.removeEventListener(POINTER_CANCEL, handler, false);\n\t}\n\n\treturn this;\n}\n\nfunction _addPointerStart(obj, handler, id) {\n\tvar onDown = Util.bind(function (e) {\n\t\t// IE10 specific: MsTouch needs preventDefault. See #2000\n\t\tif (e.MSPOINTER_TYPE_TOUCH && e.pointerType === e.MSPOINTER_TYPE_TOUCH) {\n\t\t\tDomEvent.preventDefault(e);\n\t\t}\n\n\t\t_handlePointer(e, handler);\n\t});\n\n\tobj['_leaflet_touchstart' + id] = onDown;\n\tobj.addEventListener(POINTER_DOWN, onDown, false);\n\n\t// need to keep track of what pointers and how many are active to provide e.touches emulation\n\tif (!_pointerDocListener) {\n\t\t// we listen document as any drags that end by moving the touch off the screen get fired there\n\t\tdocument.addEventListener(POINTER_DOWN, _globalPointerDown, true);\n\t\tdocument.addEventListener(POINTER_MOVE, _globalPointerMove, true);\n\t\tdocument.addEventListener(POINTER_UP, _globalPointerUp, true);\n\t\tdocument.addEventListener(POINTER_CANCEL, _globalPointerUp, true);\n\n\t\t_pointerDocListener = true;\n\t}\n}\n\nfunction _globalPointerDown(e) {\n\t_pointers[e.pointerId] = e;\n}\n\nfunction _globalPointerMove(e) {\n\tif (_pointers[e.pointerId]) {\n\t\t_pointers[e.pointerId] = e;\n\t}\n}\n\nfunction _globalPointerUp(e) {\n\tdelete _pointers[e.pointerId];\n}\n\nfunction _handlePointer(e, handler) {\n\te.touches = [];\n\tfor (var i in _pointers) {\n\t\te.touches.push(_pointers[i]);\n\t}\n\te.changedTouches = [e];\n\n\thandler(e);\n}\n\nfunction _addPointerMove(obj, handler, id) {\n\tvar onMove = function (e) {\n\t\t// don't fire touch moves when mouse isn't down\n\t\tif ((e.pointerType === (e.MSPOINTER_TYPE_MOUSE || 'mouse')) && e.buttons === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t_handlePointer(e, handler);\n\t};\n\n\tobj['_leaflet_touchmove' + id] = onMove;\n\tobj.addEventListener(POINTER_MOVE, onMove, false);\n}\n\nfunction _addPointerEnd(obj, handler, id) {\n\tvar onUp = function (e) {\n\t\t_handlePointer(e, handler);\n\t};\n\n\tobj['_leaflet_touchend' + id] = onUp;\n\tobj.addEventListener(POINTER_UP, onUp, false);\n\tobj.addEventListener(POINTER_CANCEL, onUp, false);\n}\n"]},"metadata":{},"sourceType":"module"}